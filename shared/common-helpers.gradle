import groovyx.net.http.RESTClient
import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    }
}

def getHostnameFromUrl(url) {
    def matcher = url =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/
    return matcher[0][2]
}

def getMasters(ambariUrl, ambariUsername, ambariPassword) {

    def client = new RESTClient( ambariUrl )
    client.ignoreSSLIssues()

    client.headers['Authorization'] = 'Basic ' + "$ambariUsername:$ambariPassword".getBytes('iso-8859-1').encodeBase64()
    client.headers['X-Requested-By'] = 'ambari'

    // Make REST call to get clusters
    def resp = client.get( path : 'api/v1/clusters' )

    assert resp.status == 200  // HTTP response code; 404 means not found, etc.

    // Parse output to JSON
    def jsonSlurper = new JsonSlurper()
    def object = jsonSlurper.parseText(resp.data.text)

    // Get Cluster Name
    def clusterName = object.items.Clusters[0].cluster_name

    // Define service and corresponding master components
    def services = [
       'BIGSQL':'BIGSQL_HEAD',
       'KNOX':'KNOX_GATEWAY',
       'HIVE':'HIVE_SERVER',
    ]

    def masterMap = [:]
    services.each { service_name, component_name ->

       // Make REST to get compoent info
       def respComponent = client.get( path : 'api/v1/clusters/' + clusterName + '/services/' + service_name + '/components/' + component_name )

       assert respComponent.status == 200  // HTTP response code; 404 means not found, etc.

       // Get hostname
       def object_component = jsonSlurper.parseText(respComponent.data.text)

       masterMap[component_name] = object_component.host_components.HostRoles.host_name
    }
    return masterMap
}

// export this method by attaching it to a project ext property
ext{
    getHostnameFromUrl = this.&getHostnameFromUrl
    getMasters = this.&getMasters
}

