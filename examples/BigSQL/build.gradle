apply plugin: 'groovy'

// set the dependencies for running the groovy script
buildscript {
    repositories {
        mavenCentral()
        //maven {
        //    url 'https://artifacts.alfresco.com/nexus/content/groups/public'
        //}
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'org.apache.knox:gateway-shell:0.6.0'
        classpath 'commons-io:commons-io:2.4'
        classpath 'org.apache.ant:ant-jsch:1.9.4'
//        classpath 'com.ibm.db2.jcc:db2jcc4:10.1'
//        classpath fileTree(dir: 'lib', include: '*.jar')
    }
}

// set the dependencies for compiling the groovy script
repositories {
    mavenCentral()
}

configurations {
    sshAntTask
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    compile 'org.apache.knox:gateway-shell:0.6.0'
    compile 'commons-io:commons-io:2.4'
    runtime fileTree(dir: 'lib', include: '*.jar')
    sshAntTask 'org.apache.ant:ant-jsch:1.9.4'
}

// tell gradle the groovy script is in the same folder as the build.gradle file
sourceSets {
    main {
        groovy {
            srcDirs = ['.']
        }
    }
}

clean {
    delete './lib'
    delete './truststore.jks'
}

// task to run a script
task('Example', type: JavaExec) {

    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/../../connection.properties"))

    def matcher = props.gateway =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/
    def hostname = matcher[0][2] 

    // BigSQL listens on the master-2 node
    hostname = hostname.replace('mastermanager', 'master-2')

    // import the BigInsights manager certificate
    ant.exec(executable: 'keytool', dir:'./') {
        arg(line: '-import -trustcacerts -alias biginsights -file ../../certificate -keystore ./truststore.jks -storepass mypassword -noprompt')
    }

    // setup the ant scp task
    ant.taskdef(
            name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath
            )
            
    if (!(new File('./lib/').exists())) {

        mkdir('./lib')

        // download jdbc drivers
        ant.scp(
            file: "${props.username}@${hostname}:/usr/ibmpacks/bigsql/4.1/db2/java/db2jcc.jar",
            todir: "./lib/",
            password: props.password
            )

        ant.scp(
            file: "${props.username}@${hostname}:/usr/ibmpacks/bigsql/4.1/db2/java/db2jcc4.jar",
            todir: "./lib/",
            password: props.password
            )

        ant.scp(
            file: "${props.username}@${hostname}:/usr/ibmpacks/bigsql/4.1/db2/java/db2jcc_license_cu.jar",
            todir: "./lib/",
            password: props.password
            )
    }

    environment 'hostname', hostname
    environment 'username', props.username
    environment 'password', props.password

    main = 'Example'
    classpath = sourceSets.main.runtimeClasspath
}
