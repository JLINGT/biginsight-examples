plugins {
  id 'org.hidetake.ssh' version '1.5.0'
}

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

// extract BigInsights hostname from the gateway url
def matcher = props.gateway =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/
def hostname = matcher[0][2] 

// setup the connection details for ssh
remotes {
    bicluster {
       host = hostname
       user = props.username
       password = props.password
    }
}

ssh.settings {
    if (props.known_hosts == 'allowAnyHosts') {
        // disable ssh host key verification 
        knownHosts = allowAnyHosts
    }
}

task('clean') << {
    delete "${projectDir}/Rhistory"
    delete "${projectDir}/truststore.jks"
    delete "${projectDir}/bigr.tar.gz"
    delete "${projectDir}/lib"
}


task ('installPackages', type:Exec) {

    mustRunAfter clean

    // tell gradle we don't need to run this task if the ./lib/bigr/ folder exists
    outputs.files file("${projectDir}/lib/bigr/")

    // ensure the ssl certificate exists
    if (!file("${projectDir}/../../certificate").exists()) {
        throw new GradleException("'certificate' file could not be found in ${projectDir.parentFile.parentFile}")
    }

    // import the BigInsights manager certificate
    ant.exec(executable: 'keytool', dir:'./') {
        arg(line: '-import -trustcacerts -alias biginsights -file ../../certificate -keystore ./truststore.jks -storepass mypassword -noprompt')
    }

    // only grab the file if it doesn't already exist locally
    if (!(new File('./bigr.tar.gz').exists())) {

        ssh.run {
            session(remotes.bicluster) {

                // grab the bigr package from the cluster
                get from: "/usr/ibmpacks/current/bigr/bigr/bigr_*.tar.gz",
                    into: "${projectDir}/bigr.tar.gz"
            }
        }
    }

    // set where we want the R packages installed
    environment 'libdir',   "${projectDir}/lib"

    commandLine 'Rscript', "--verbose", "--vanilla", "${projectDir}/install_packages.r"
}

['Connect'].each { taskName ->
    task "$taskName" (dependsOn: installPackages, type: Exec) {

        // pass environment variables to the R script
        environment 'libdir',   "${projectDir}/lib"
        environment 'hostname', getMasters(props)['BIGSQL_HEAD'][0]
        environment 'username', props.username
        environment 'password', props.password
        environment 'projdir',  projectDir

        if (project.hasProperty('debugExample')) {
            environment 'debug', "TRUE"
        } else {
            environment 'debug', "FALSE"
        }

        // execute R script - inpect example.r for details
        commandLine "Rscript", "--verbose", "--vanilla", "${projectDir}/${taskName.toLowerCase()}.r"
    }
}

task('Example') {
    dependsOn Connect
}
