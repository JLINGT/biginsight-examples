// set the dependencies for running the groovy script
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'org.apache.knox:gateway-shell:0.8.0'
    }
}

plugins {
  id 'groovy'
  id 'org.hidetake.ssh' version '1.5.0'
}

// load some common helper methods
apply from: "${projectDir}/../../shared/common-helpers.gradle"

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

// set the dependencies for compiling the groovy script
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    compile 'org.apache.knox:gateway-shell:0.8.0'
    // include the bigsql jar files
    runtime fileTree(dir: 'lib', include: '*.jar')
}

// tell gradle the groovy script is in the same folder as the build.gradle file
sourceSets {
    main {
        groovy {
            srcDirs = ['.']
        }
    }
}

clean {
    delete './lib'
    delete './truststore.jks'
}

task ('CreateTrustStore', type:Exec) {

    // this build step will fail if we try to import the certificate into an existing truststore
    delete './truststore.jks'

    // ensure the ssl certificate exists
    if (!file("${projectDir}/../../certificate").exists()) {
        throw new GradleException("'certificate' file could not be found in ${projectDir.parentFile.parentFile}")
    }

    // import the BigInsights manager certificate
    commandLine "keytool -import -trustcacerts -alias biginsights -file ${projectDir}/../../certificate -keystore ./truststore.jks -storepass mypassword -noprompt".split()
}

// task to run groovy script
['Connect', 'Insert', 'Load', 'Hbase', 'Federation'].each { taskName ->
   task "$taskName" (type: JavaExec) {

      // if running this task with clean, ensure clean runs first
      mustRunAfter clean 

      dependsOn CreateTrustStore
      dependsOn SetupLibs

      environment 'hostname', getMasters(props)['BIGSQL_HEAD'][0]
      environment 'username', props.username
      environment 'password', props.password
      environment 'dashUser', props.dashUser
      environment 'dashPassword', props.dashPassword
      environment 'dashHost', props.dashHost
      environment 'dashPort', props.dashPort

      main = taskName
      classpath = sourceSets.main.runtimeClasspath
   }
}

// Main example task
task('Example') {
     dependsOn Connect, Insert, Load, Hbase, Federation
}
