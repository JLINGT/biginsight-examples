plugins {
  id 'org.hidetake.ssh' version '1.5.0'
}

// load some common helper methods
apply from: "${projectDir}/../../shared/common-helpers.gradle"

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

task('customClean') << {
    delete "${projectDir}/Rhistory"
    delete "${projectDir}/truststore.jks"
    delete "${projectDir}/bigr.tar.gz"
    delete "${projectDir}/lib"
}

// ensure clean n shared/common-helpers.gradle executes our customClean target
clean.dependsOn customClean

task ('installPackages', type:Exec) {

    mustRunAfter clean, customClean

    // only grab the file if it doesn't already exist locally
    if (!file("${projectDir}/bigr.tar.gz").exists()) {

        ssh.run {
             // remotes.bicluster is defined in shared/common-helpers.gradle
            session(remotes.bicluster) {

                // grab the bigr package from the cluster
                get from: "/usr/ibmpacks/current/bigr/bigr/bigr_*.tar.gz",
                    into: "${projectDir}/bigr.tar.gz"
            }
        }
    }

    // tell gradle we don't need to run this task if the ./lib/bigr/ folder exists
    if (file("${projectDir}/lib/bigr/").exists()) {
        commandLine 'echo', "Found directory ${projectDir}/lib/bigr/ - Skipping installPackages as packages are already installed"
        return
    } 

    // ensure the ssl certificate exists
    if (!file("${projectDir}/../../certificate").exists()) {
        throw new GradleException("'certificate' file could not be found in ${projectDir.parentFile.parentFile}")
    }

    // import the BigInsights manager certificate
    ant.exec(executable: 'keytool', dir:'./') {
        arg(line: '-import -trustcacerts -alias biginsights -file ../../certificate -keystore ./truststore.jks -storepass mypassword -noprompt')
    }

    // set where we want the R packages installed
    environment 'libdir',   "${projectDir}/lib"
    
    if (project.hasProperty('debugBigR')) {
      environment 'debug', "TRUE"
    } else {
      environment 'debug', "FALSE"
    }

    commandLine 'Rscript', "--verbose", "--vanilla", "${projectDir}/install_packages.r"
}

task('GenerateSampleScript') << {

    def f = file('./connect_template.r')

    if (f.exists()) {
        println('\nERROR: File connect_template.r already exists. Please delete it and try again.')
        return
    }

    f.text = """
################################################################################
libdir   <- "${projectDir}/lib"
hostname <- "${getMasters(props)['BIGSQL_HEAD'][0]}"
username <- "${props.username}"
password <- "${props.password}"
projdir  <- "${projectDir}"
debug    <- FALSE
################################################################################

quiet=TRUE

if (debug) {
  quiet=FALSE
}

.libPaths(libdir)

# create directory to hold libraries
dir.create(libdir)

# install libraries

if (!"rJava" %in% rownames(installed.packages())) {
    install.packages('rJava',      repos='http://cran.us.r-project.org', lib=libdir, quiet=quiet)
}
if (!"base64enc" %in% rownames(installed.packages())) {
    install.packages('base64enc',  repos='http://cran.us.r-project.org', lib=libdir, quiet=quiet)
}
if (!"data.table" %in% rownames(installed.packages())) {
    install.packages('data.table', repos='http://cran.us.r-project.org', lib=libdir, quiet=quiet)
}

# The BigR package is downloaded for you by the build.gradle script
if (!"bigr" %in% rownames(installed.packages())) {
    install.packages('bigr.tar.gz', type="source", repos=NULL, lib=libdir, quiet=quiet)
}


library(bigr)
bigr:::bigr.debug(toupper(debug))

# truststore is created by the build.gradle script

connected <- bigr.connect(
    host = hostname,
    user = username,
    password = password,
    ssl = TRUE,
    trustStorePath = paste(projdir, "/truststore.jks", sep=""),
    trustStorePassword = "mypassword",
    keyManager = "SunX509"
    )

if (connected) {
    print("Successfully connected to BigR")
}
"""
    println "Created file connect_template.r"
}

['Connect', 'UploadData', 'LinearRegression', 'KMeans'].each { taskName ->
    task "$taskName" (dependsOn: installPackages, type: Exec) {

        // pass environment variables to the R script
        environment 'libdir',   "${projectDir}/lib"
        environment 'hostname', getMasters(props)['BIGSQL_HEAD'][0]
        environment 'username', props.username
        environment 'password', props.password
        environment 'projdir',  projectDir

        if (project.hasProperty('debugBigR')) {
            environment 'debug', "TRUE"
        } else {
            environment 'debug', "FALSE"
        }

        // execute R script - inpect example.r for details
        commandLine "Rscript", "--verbose", "--vanilla", "${projectDir}/${taskName.toLowerCase()}.r"
    }
}

// The examples are progressive, we should run them in the order of most simple first
// There isn't any point trying to run LinearRegression if Connect or UploadData fail.

UploadData.mustRunAfter Connect
LinearRegression.mustRunAfter UploadData
KMeans.mustRunAfter Connect

task('Example') {
    dependsOn Connect, UploadData, LinearRegression, KMeans
}

