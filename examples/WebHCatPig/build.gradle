// set the dependencies for running the groovy script
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'org.apache.knox:gateway-shell:0.6.0'
    }
}

plugins {
  id 'org.hidetake.ssh' version '1.5.0'
  id 'groovy'
}

Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

// extract BigInsights hostname from the gateway url
def matcher = props.gateway =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/
def hostname = matcher[0][2] 

// setup the connection details for ssh
remotes {
    bicluster {
       host = hostname
       user = props.username
       password = props.password
    }
}

// set the dependencies for compiling the groovy script and mapreduce classes
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    compile 'org.apache.knox:gateway-shell:0.6.0'
}

// tell gradle the groovy script is in the same folder as the build.gradle file
sourceSets {
    main {
        groovy {
            srcDirs = ['.']
        }

        // switch on debug output with ./gradlew Example -PdebugExample
        if (project.hasProperty('debugExample')) {
            resources {
               // log4j.properties file in resources with http trace
               srcDirs = ['resources']
            }
        }
    }
}

// task to run the groovy script
task('Example', type: JavaExec) {

    ssh.run {
        session(remotes.bicluster) {
            try {
                // initialise kerberos
                execute "kinit -k -t biadmin.keytab biadmin@IBM.COM"
            } 
            catch (Exception e) {
                println "problem running kinit - maybe this is a Basic cluster?"
            }
        }
    }

    environment 'gateway', props.gateway
    environment 'username', props.username
    environment 'password', props.password

    main = 'Example'
    classpath = sourceSets.main.runtimeClasspath
}
