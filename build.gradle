import static org.gradle.testkit.runner.TaskOutcome.*
import com.jcraft.jsch.JSchException

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'jline:jline:2.12'
        classpath gradleTestKit()
    }
}

plugins {
  id 'org.hidetake.ssh' version '1.5.0'
}

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/connection.properties"))

// extract BigInsights hostname from the gateway url
def matcher = props.gateway =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/

def mastermanager_hostname = matcher[0][2] 

def master2_hostname = mastermanager_hostname.replace('mastermanager', 'master-2')

// setup the connection details for ssh
remotes {
    bicluster {
       host = mastermanager_hostname
       user = props.username
       password = props.password
    }
    bicluster_master2 {
       host = master2_hostname
       user = props.username
       password = props.password
    }
}

ssh.settings {
    if (props.known_hosts == 'allowAnyHosts') {
        // disable ssh host key verification 
        knownHosts = allowAnyHosts
    }
}

////////////////////////////////////////////////////////////////////////////////

// verify Ssh connectivity by attempting a SSH session

task verifySshConnectivity << {

    try {
        ssh.run {
            session(remotes.bicluster) {
                execute "echo successfully connected to ${mastermanager_hostname} over ssh"
            }
        }
    } catch (JSchException e) {
        System.err.println "** SSH error: ${e.message} - some tests will fail **"
        System.err.println "Resolution: ssh into ${mastermanager_hostname} or set known_hosts:allowAnyHosts in connection.properties"
    }

    if (master2_hostname != mastermanager_hostname) {
        try {
            ssh.run {
                session(remotes.bicluster_master2) {
                    execute "echo successfully connected to ${master2_hostname} over ssh"
                }
            }
        } catch (JSchException e) {
            System.err.println "** SSH error: ${e.message} - some tests will fail **"
            System.err.println "Resolution: ssh into ${master2_hostname} or set known_hosts:allowAnyHosts in connection.properties"
        }
    }
}


task verifyConfig(dependsOn: verifySshConnectivity) << {
    // TODO extend this to verifyCertificate
}

////////////////////////////////////////////////////////////////////////////////

// Methods and task to pretty print cluster info

def termWidth() {
    // jline doesn't play nicely on some windows machines
    try {
        return  jline.TerminalFactory.get().getWidth()
    } catch (Exception e) {
        return 80
    }
}

def printSep() {
    println "-" * termWidth()
}

def printCenter(text) {
    print " " * ((termWidth() / 2) - (text.length()/2)) 
    println text
}

task('ClusterDetails') {

    printSep()
    printCenter("\033[1mCLUSTER DETAILS\033[0m")
    printSep()
    println "Ambari URL         ::      https://${mastermanager_hostname}:9443/"
    println "BigInsights URL    ::      https://${mastermanager_hostname}:8443/gateway/default/BigInsightsWeb/index.html"
    println "YARN URL           ::      https://${mastermanager_hostname}:8443/gateway/yarnui/yarn/apps"
    println "Master Mgr SSH URL ::      ssh://${props.username}@${mastermanager_hostname}"
    // Basic plan doesn't have a master2
    if (master2_hostname != mastermanager_hostname) {
        println "Master 2   SSH URL ::      ssh://${props.username}@${master2_hostname}"
    }
    printSep()
}

////////////////////////////////////////////////////////////////////////////////

// methods and tasks to test (build) example projects

def buildProject(proj) {

        try {
            GradleRunner.create()
                    .withProjectDir(file("./examples/${proj}/"))
                    .withArguments('clean')
                    .build()
        } catch (Exception e) {
            // noop - some projects don't have clean tasks
        }

        try {
            FileWriter writer = new FileWriter("build/test/${proj}.txt")

            GradleRunner.create()
                    .withProjectDir(file("./examples/${proj}/"))
                    .forwardStdError(writer)
                    .forwardStdOutput(writer)
                    .withArguments(['Example', '-PdebugExample'])
                    .build()

            writer.close()

        } catch (Exception e) { 
            println "Test failed  ./examples/${proj}"
            return
        }

        println "Test passed  ./examples/${proj}"
}

task testSetup(dependsOn: verifyConfig) {
    
    delete('build')
    mkdir('build/test')
}


task baseTest(dependsOn: testSetup) << {
    println "Running base tests"

    [
      'WebHdfsLs', 
      'WebHdfsMkdir', 
      'WebHdfsPut',
      'Hive',
      'HiveJava',
      'SparkPythonSsh',
      'SparkStreamingPythonSsh',
      'CloudantPullWithSpark',
      'CloudantPushWithSpark',
      'DashDBPullWithSpark',
      'DashDBPushWithSpark',
      'OozieWorkflowMapReduce',
      'OozieWorkflowSpark',
      'WebHCatMapReduce',
      'WebHCatPig',
      'WebHCatHive',
      'HBase',
      'HBaseJava',
      'HBaseManipulateSchemaAndPerformCRUD'
    ].each() { proj -> buildProject(proj) }

    // These examples are interactive so aren't easy to automate
    [
      'HiveBeeline',
      'Knoxshell',
    ].each() { 
        println "Test skipped ./examples/${it} [interactive examples are not tested]"
    }
   
    // examples not implemented due to upstream dependencies not being met 
    [
      'Flume',
      'Sqoop',
      'Solr',
      'Kafka',
    ].each() { 
        println "Test skipped ./examples/${it} [example not implemented due to known issue with BIoC clusters]"
    }
}

// TODO split this by module
task xTest(dependsOn: baseTest) << {

    println "Running BigX tests"

    [
      'BigR', 
      'BigSQL', 
      'BigSQLJava',
    ].each() { proj -> buildProject(proj) }
}

task test(dependsOn: xTest) << {
    println "Finished running tests.  *** Test output can be found in '${projectDir}/build/test/' ***"
}


////////////////////////////////////////////////////////////////////////////////

