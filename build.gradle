import org.gradle.testkit.runner.GradleRunner
import static org.gradle.testkit.runner.TaskOutcome.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
        classpath 'jline:jline:2.12'
        classpath gradleTestKit()
    }
}

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/connection.properties"))

// extract BigInsights hostname from the gateway url
def matcher = props.gateway =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/

def mastermanager_hostname = matcher[0][2] 

def master2_hostname = mastermanager_hostname.replace('mastermanager', 'master-2')

////////////////////////////////////////////////////////////////////////////////

// Methods and task to pretty print cluster info

def termWidth() {
    return  jline.TerminalFactory.get().getWidth()
}

def printSep() {
    println "-" * termWidth()
}

def printCenter(text) {
    print " " * ((termWidth() / 2) - (text.length()/2)) 
    println text
}

task('ClusterDetails') {

    printSep()
    printCenter("\033[1mCLUSTER DETAILS\033[0m")
    printSep()
    println "Ambari URL         ::      https://${mastermanager_hostname}:9443/"
    println "BigInsights URL    ::      https://${mastermanager_hostname}:8443/gateway/default/BigInsightsWeb/index.html"
    println "YARN URL           ::      https://${mastermanager_hostname}:8443/gateway/yarnui/yarn/apps"
    println "Master Mgr SSH URL ::      ssh://${props.username}@${mastermanager_hostname}"
    // Basic plan doesn't have a master2
    if (master2_hostname != mastermanager_hostname) {
        println "Master 2   SSH URL ::      ssh://${props.username}@${master2_hostname}"
    }
    printSep()
}

////////////////////////////////////////////////////////////////////////////////

// methods and tasks to test (build) example projects

def buildProject(proj) {

        // switch on debug output with ./gradlew test -PdebugTest
        try {
            if (project.hasProperty('debugTest')) {
                GradleRunner.create()
                        .withProjectDir(file("./examples/${proj}/"))
                        .withArguments('Example')
                        .forwardOutput()
                        .build()
            } else {
                GradleRunner.create()
                        .withProjectDir(file("./examples/${proj}/"))
                        .withArguments('Example')
                        .build()
            }
        } catch (Exception e) { 
            println "Test failed  ./examples/${proj}"
            return
        }

        println "Test passed  ./examples/${proj}"
}

task baseTest << {
    println "Running base tests"

    [
      'WebHdfsLs', 
      'WebHdfsMkdir', 
      'WebHdfsPut',
      'Hive',
      'HiveJava',
      'SparkPythonSsh',
      'CloudantPullWithSpark',
      'CloudantPushWithSpark',
      'DashDBPullWithSpark',
      'Hbase',
      'HBaseJava',
      'OozieWorkflowMapReduce',
    ].each() { proj -> buildProject(proj) }

    // These examples are interactive so aren't easy to automate
    [
      'HiveBeeline',
      'Knoxshell',
    ].each() { 
        println "Test skipped ./examples/${it} [interactive examples are not tested]"
    }
}

// TODO split this by module
task xTest(dependsOn: baseTest) << {

    println "Running BigX tests"

    [
      'BigR', 
      'BigSQL', 
      'BigSQLJava',
    ].each() { proj -> buildProject(proj) }
}

task test(dependsOn: xTest) << {
    println "Finished running tests"
}

////////////////////////////////////////////////////////////////////////////////
