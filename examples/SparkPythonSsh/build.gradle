plugins {
  id 'org.hidetake.ssh' version '1.5.0'
}

Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

// extract BigInsights hostname from the gateway url
def matcher = props.gateway =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/
def hostname = matcher[0][2] 

// setup the connection details for ssh
remotes {
    bicluster {
       host = hostname
       user = props.username
       password = props.password
    }
}

task Example << {

    def tmpDir = "test-${new Date().getTime()}"

    def tmpHdfsDir = "/user/${props.username}/${tmpDir}"
    
    // ssh plugin documentation: https://gradle-ssh-plugin.github.io/docs/
    
    ssh.run {
        session(remotes.bicluster) {

            // initialise kerberos
            execute "kinit -k -t biadmin.keytab biadmin@IBM.COM"

            // create temp local dir for holding LICENSE file before uploading it to hdfs
            execute "mkdir ${tmpDir}"

            // upload spark script and text file to process
            put from: "${projectDir}/wordcount.py", into: "${tmpDir}/wordcount.py"
            put from: "${projectDir}/LICENSE", into: "${tmpDir}/LICENSE"

            // create temp hdfs folder for holding LICENSE file
            execute "hadoop fs -mkdir ${tmpHdfsDir}"
            
            // put LICENSE into hdfs
            execute "hadoop fs -put ${tmpDir}/LICENSE ${tmpHdfsDir}/LICENSE"

            // execute spark workcount job against the LICENSE file in hdfs
            execute "pyspark ${tmpDir}/wordcount.py ${tmpHdfsDir}/LICENSE"

            // remove temporary hdfs dir
            execute "hadoop fs -rm -r ${tmpHdfsDir}"

            // remove temporary local dir
            execute "rm -rf ${tmpDir}"
        }
    }
}
