// set the dependencies for running the groovy script
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.codehaus.groovy:groovy-all:2.0.5'
    }
}

plugins {
  id 'groovy'
  id 'org.hidetake.ssh' version '1.5.0'
}

// get the cluster connection details
Properties props = new Properties()
props.load(new FileInputStream("$projectDir/../../connection.properties"))

// extract BigInsights hostname from the gateway url
def matcher = props.gateway =~ /^(https?:\/\/)([^:^\/]*)(:\d*)?(.*)?.*$/
def hostname = matcher[0][2] 

// BigSQL listens on the master-2 node, also libraries are downloaded from master-2
hostname = hostname.replace('mastermanager', 'master-2')

// setup the connection details for ssh
remotes {
    bicluster {
       host = hostname
       user = props.username
       password = props.password
    }
}

// set the dependencies for compiling the groovy script
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    // include the bigsql jar files
    runtime fileTree(dir: 'lib', include: '*.jar')
}

// tell gradle the groovy script is in the same folder as the build.gradle file
sourceSets {
    main {
        groovy {
            srcDirs = ['.']
        }
    }
}

clean {
    delete './lib'
    delete './truststore.jks'
}

task ('CreateTrustStore', type:Exec) {

    delete './truststore.jks'

    // ensure the ssl certificate exists
    if (!file("${projectDir}/../../certificate").exists()) {
        throw new GradleException("'certificate' file could not be found in ${projectDir.parentFile.parentFile}")
    }

    // import the BigInsights manager certificate
    commandLine "keytool -import -trustcacerts -alias biginsights -file ${projectDir}/../../certificate -keystore ./truststore.jks -storepass mypassword -noprompt".split()
}

task ('SetupLibs') {

    // if running this task with clean, ensure clean runs first
    mustRunAfter clean 

   // tell gradle we don't need to run this task if the ./lib folder exists
    outputs.files file("${projectDir}/lib/")

    doLast {

        // create a folder for the libraries
        mkdir("${projectDir}/lib")

        // download jdbc drivers from the BigInsights cluster using SCP
        ssh.run {
            session(remotes.bicluster) {

                get from: "/usr/ibmpacks/bigsql/4.1/db2/java/db2jcc.jar",
                    into: "${projectDir}/lib/db2jcc.jar"
                
                get from: "/usr/ibmpacks/bigsql/4.1/db2/java/db2jcc4.jar",
                    into: "${projectDir}/lib/db2jcc4.jar"

                get from: "/usr/ibmpacks/bigsql/4.1/db2/java/db2jcc_license_cu.jar",
                    into: "${projectDir}/lib/db2jcc_license_cu.jar"
            }
        }
    }
}

// task to run the Example.groovy script
task('Example', type: JavaExec) {

    // if running this task with clean, ensure clean runs first
    mustRunAfter clean 

    dependsOn CreateTrustStore
    dependsOn SetupLibs

    environment 'hostname', hostname
    environment 'username', props.username
    environment 'password', props.password

    main = 'Example'
    classpath = sourceSets.main.runtimeClasspath
}

